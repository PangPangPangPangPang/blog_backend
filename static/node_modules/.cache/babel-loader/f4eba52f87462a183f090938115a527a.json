{"ast":null,"code":"/**\n * Created by Max on 03/03/2017.\n */\nimport { combineReducers } from 'redux';\nimport Types from '../action/type';\n\nfunction handleRequestSuccess(state, action) {\n  var k = action.query;\n\n  switch (k) {\n    case 'list':\n      {\n        var articleList = JSON.parse(action.res.result);\n        var articles = {};\n        var articleMap = {};\n        articles.list = articleList;\n        Object.keys(articleList).forEach(function (index) {\n          var id = articleList[index].id;\n          articleMap[id] = articleList[index];\n        });\n        articles.map = articleMap;\n        return Object.assign({}, state, {\n          articles: articles\n        });\n      }\n\n    case 'register':\n      return Object.assign({}, state, {\n        register: action.res.result\n      });\n\n    case 'article':\n      {\n        var article = JSON.parse(action.res.result);\n\n        if (article.id) {\n          var origin = state[article.id] ? state[article.id] : {};\n          var combine = Object.assign({}, article, origin);\n          var obj = {};\n          obj[article.id] = combine;\n          return Object.assign({}, state, obj);\n        }\n\n        return state;\n      }\n\n    case 'fetchcomment':\n      {\n        if (action.res.result === null) {\n          return state;\n        }\n\n        var comments = action.res.result.comments;\n        var articleId = action.res.result.article_id;\n\n        if (articleId) {\n          var _article = state[articleId] ? state[articleId] : {};\n\n          var _combine = Object.assign({}, _article, {\n            comments: comments\n          });\n\n          var _obj = {};\n          _obj[articleId] = _combine;\n          return Object.assign({}, state, _obj);\n        }\n\n        return state;\n      }\n\n    default:\n      return Object.assign({}, state, {\n        ret: action\n      });\n  }\n}\n\nvar request = function request() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case Types.REQUEST_START:\n      return Object.assign({}, state, {\n        type: action.type\n      });\n\n    case Types.REQUEST_SUCCESS:\n      return handleRequestSuccess(state, action);\n\n    case Types.REQUEST_FAILURE:\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nvar reply = function reply() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case Types.REPLY_COMMENT:\n      {\n        return Object.assign({}, state, {\n          commentID: action.commentID\n        });\n      }\n\n    case Types.CLEAR_REPLY_COMMENT:\n      {\n        return Object.assign({}, state, {\n          commentID: -1\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nvar user = function user() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case Types.UPDATE_CURRENT_ARTICLE:\n      {\n        return Object.assign({}, state, {\n          articleID: action.articleID\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nvar reducer = combineReducers({\n  user: user,\n  request: request,\n  reply: reply\n});\nexport default reducer;","map":{"version":3,"sources":["/home/max/blog_frontend/src/reducer/reducer.js"],"names":["combineReducers","Types","handleRequestSuccess","state","action","k","query","articleList","JSON","parse","res","result","articles","articleMap","list","Object","keys","forEach","index","id","map","assign","register","article","origin","combine","obj","comments","articleId","article_id","ret","request","type","REQUEST_START","REQUEST_SUCCESS","REQUEST_FAILURE","reply","REPLY_COMMENT","commentID","CLEAR_REPLY_COMMENT","user","UPDATE_CURRENT_ARTICLE","articleID","reducer"],"mappings":"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","sourcesContent":["/**\n * Created by Max on 03/03/2017.\n */\nimport { combineReducers } from 'redux'\nimport Types from '../action/type'\n\nfunction handleRequestSuccess(state, action) {\n  const k = action.query\n  switch (k) {\n    case 'list': {\n      const articleList = JSON.parse(action.res.result)\n      const articles = {}\n      const articleMap = {}\n      articles.list = articleList\n      Object.keys(articleList).forEach((index) => {\n        const { id } = articleList[index]\n        articleMap[id] = articleList[index]\n      })\n      articles.map = articleMap\n      return Object.assign({}, state, { articles })\n    }\n    case 'register':\n      return Object.assign({}, state, { register: action.res.result })\n    case 'article': {\n      const article = JSON.parse(action.res.result)\n      if (article.id) {\n        const origin = state[article.id] ? state[article.id] : {}\n        const combine = Object.assign({}, article, origin)\n        const obj = {}\n        obj[article.id] = combine\n\n        return Object.assign({}, state, obj)\n      }\n      return state\n    }\n    case 'fetchcomment': {\n      if (action.res.result === null) {\n        return state\n      }\n      const { comments } = action.res.result\n      const articleId = action.res.result.article_id\n      if (articleId) {\n        const article = state[articleId] ? state[articleId] : {}\n        const combine = Object.assign({}, article, { comments })\n        const obj = {}\n        obj[articleId] = combine\n        return Object.assign({}, state, obj)\n      }\n      return state\n    }\n    default:\n      return Object.assign({}, state, { ret: action })\n  }\n}\n\nconst request = (state = {}, action) => {\n  switch (action.type) {\n    case Types.REQUEST_START:\n      return Object.assign({}, state, { type: action.type })\n    case Types.REQUEST_SUCCESS:\n      return handleRequestSuccess(state, action)\n    case Types.REQUEST_FAILURE:\n      return state\n    default:\n      return state\n  }\n}\n\nconst reply = (state = {}, action) => {\n  switch (action.type) {\n    case Types.REPLY_COMMENT: {\n      return Object.assign({}, state, { commentID: action.commentID })\n    }\n    case Types.CLEAR_REPLY_COMMENT: {\n      return Object.assign({}, state, { commentID: -1 })\n    }\n\n    default:\n      return state\n  }\n}\n\nconst user = (state = {}, action) => {\n  switch (action.type) {\n    case Types.UPDATE_CURRENT_ARTICLE: {\n      return Object.assign({}, state, { articleID: action.articleID })\n    }\n    default:\n      return state\n  }\n}\n\nconst reducer = combineReducers({\n  user,\n  request,\n  reply,\n})\nexport default reducer\n"]},"metadata":{},"sourceType":"module"}