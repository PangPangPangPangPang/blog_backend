{"ast":null,"code":"/**\n * Created by Max on 03/03/2017.\n */\nimport Type from './type';\nimport { getStore } from '../App';\nvar baseUrl = 'http://localhost:8080/';\n\nif (process.env.NODE_ENV === 'production') {\n  baseUrl = 'https://maxxxxx.life/';\n}\n\nexport function getbaseUrl() {\n  return baseUrl;\n}\n\nfunction requestAction(type, query, res) {\n  return {\n    type: type,\n    query: query,\n    res: res\n  };\n}\n\nexport default function request(url, params, method) {\n  var reqparams = {};\n  var requestUrl = baseUrl + url;\n  var requestMethod = method;\n  var requestParams = params;\n\n  if (arguments.length < 3) {\n    requestMethod = 'get';\n  }\n\n  if (arguments.length === 1) {\n    requestParams = {};\n  }\n\n  if (requestMethod === 'get') {\n    var querystring = Object.keys(requestParams).map(function (key) {\n      return \"\".concat(key, \"=\").concat(requestParams[key]);\n    }).join('&');\n\n    if (querystring.length !== 0) {\n      requestUrl += \"?\".concat(querystring);\n    }\n  } else {\n    reqparams.body = params;\n  }\n\n  reqparams.method = requestMethod;\n  getStore().dispatch(requestAction(Type.REQUEST_START, url, {}));\n  return function (dispatch) {\n    return fetch(requestUrl, reqparams).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      dispatch(requestAction(Type.REQUEST_SUCCESS, url, res));\n      return res;\n    }).catch(function (res) {\n      dispatch(requestAction(Type.REQUEST_FAILURE, url, res));\n      return res;\n    });\n  };\n}","map":{"version":3,"sources":["/home/max/blog_frontend/src/action/request.js"],"names":["Type","getStore","baseUrl","process","env","NODE_ENV","getbaseUrl","requestAction","type","query","res","request","url","params","method","reqparams","requestUrl","requestMethod","requestParams","arguments","length","querystring","Object","keys","map","key","join","body","dispatch","REQUEST_START","fetch","then","json","REQUEST_SUCCESS","catch","REQUEST_FAILURE"],"mappings":"AAAA;;;AAIA,OAAOA,IAAP,MAAiB,QAAjB;AACA,SAASC,QAAT,QAAyB,QAAzB;AAEA,IAAIC,OAAO,GAAG,wBAAd;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCH,EAAAA,OAAO,GAAG,uBAAV;AACD;;AAED,OAAO,SAASI,UAAT,GAAsB;AAC3B,SAAOJ,OAAP;AACD;;AAED,SAASK,aAAT,CAAuBC,IAAvB,EAA6BC,KAA7B,EAAoCC,GAApC,EAAyC;AACvC,SAAO;AACLF,IAAAA,IAAI,EAAJA,IADK;AAELC,IAAAA,KAAK,EAALA,KAFK;AAGLC,IAAAA,GAAG,EAAHA;AAHK,GAAP;AAKD;;AAED,eAAe,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,MAAtB,EAA8BC,MAA9B,EAAsC;AACnD,MAAMC,SAAS,GAAG,EAAlB;AACA,MAAIC,UAAU,GAAGd,OAAO,GAAGU,GAA3B;AACA,MAAIK,aAAa,GAAGH,MAApB;AACA,MAAII,aAAa,GAAGL,MAApB;;AAEA,MAAIM,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxBH,IAAAA,aAAa,GAAG,KAAhB;AACD;;AACD,MAAIE,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1BF,IAAAA,aAAa,GAAG,EAAhB;AACD;;AACD,MAAID,aAAa,KAAK,KAAtB,EAA6B;AAC3B,QAAMI,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYL,aAAZ,EACjBM,GADiB,CACb,UAAAC,GAAG;AAAA,uBAAOA,GAAP,cAAcP,aAAa,CAACO,GAAD,CAA3B;AAAA,KADU,EAEjBC,IAFiB,CAEZ,GAFY,CAApB;;AAGA,QAAIL,WAAW,CAACD,MAAZ,KAAuB,CAA3B,EAA8B;AAC5BJ,MAAAA,UAAU,eAAQK,WAAR,CAAV;AACD;AACF,GAPD,MAOO;AACLN,IAAAA,SAAS,CAACY,IAAV,GAAiBd,MAAjB;AACD;;AACDE,EAAAA,SAAS,CAACD,MAAV,GAAmBG,aAAnB;AAEAhB,EAAAA,QAAQ,GAAG2B,QAAX,CAAoBrB,aAAa,CAACP,IAAI,CAAC6B,aAAN,EAAqBjB,GAArB,EAA0B,EAA1B,CAAjC;AAEA,SAAO,UAAAgB,QAAQ;AAAA,WAAIE,KAAK,CAACd,UAAD,EAAaD,SAAb,CAAL,CAChBgB,IADgB,CACX,UAAArB,GAAG;AAAA,aAAIA,GAAG,CAACsB,IAAJ,EAAJ;AAAA,KADQ,EAEhBD,IAFgB,CAEX,UAACrB,GAAD,EAAS;AACbkB,MAAAA,QAAQ,CAACrB,aAAa,CAACP,IAAI,CAACiC,eAAN,EAAuBrB,GAAvB,EAA4BF,GAA5B,CAAd,CAAR;AACA,aAAOA,GAAP;AACD,KALgB,EAMhBwB,KANgB,CAMV,UAACxB,GAAD,EAAS;AACdkB,MAAAA,QAAQ,CAACrB,aAAa,CAACP,IAAI,CAACmC,eAAN,EAAuBvB,GAAvB,EAA4BF,GAA5B,CAAd,CAAR;AACA,aAAOA,GAAP;AACD,KATgB,CAAJ;AAAA,GAAf;AAUD","sourcesContent":["/**\n * Created by Max on 03/03/2017.\n */\n\nimport Type from './type'\nimport { getStore } from '../App'\n\nlet baseUrl = 'http://localhost:8080/'\n\nif (process.env.NODE_ENV === 'production') {\n  baseUrl = 'https://maxxxxx.life/'\n}\n\nexport function getbaseUrl() {\n  return baseUrl\n}\n\nfunction requestAction(type, query, res) {\n  return {\n    type,\n    query,\n    res,\n  }\n}\n\nexport default function request(url, params, method) {\n  const reqparams = {}\n  let requestUrl = baseUrl + url\n  let requestMethod = method\n  let requestParams = params\n\n  if (arguments.length < 3) {\n    requestMethod = 'get'\n  }\n  if (arguments.length === 1) {\n    requestParams = {}\n  }\n  if (requestMethod === 'get') {\n    const querystring = Object.keys(requestParams)\n      .map(key => `${key}=${requestParams[key]}`)\n      .join('&')\n    if (querystring.length !== 0) {\n      requestUrl += `?${querystring}`\n    }\n  } else {\n    reqparams.body = params\n  }\n  reqparams.method = requestMethod\n\n  getStore().dispatch(requestAction(Type.REQUEST_START, url, {}))\n\n  return dispatch => fetch(requestUrl, reqparams)\n    .then(res => res.json())\n    .then((res) => {\n      dispatch(requestAction(Type.REQUEST_SUCCESS, url, res))\n      return res\n    })\n    .catch((res) => {\n      dispatch(requestAction(Type.REQUEST_FAILURE, url, res))\n      return res\n    })\n}\n"]},"metadata":{},"sourceType":"module"}