{"ast":null,"code":"/*!\n * deep-diff.\n * Licensed under the MIT License.\n */\n;\n\n(function (root, factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return factory();\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.DeepDiff = factory();\n  }\n})(this, function (undefined) {\n  'use strict';\n\n  var $scope,\n      conflict,\n      conflictResolution = [];\n\n  if (typeof global === 'object' && global) {\n    $scope = global;\n  } else if (typeof window !== 'undefined') {\n    $scope = window;\n  } else {\n    $scope = {};\n  }\n\n  conflict = $scope.DeepDiff;\n\n  if (conflict) {\n    conflictResolution.push(function () {\n      if ('undefined' !== typeof conflict && $scope.DeepDiff === accumulateDiff) {\n        $scope.DeepDiff = conflict;\n        conflict = undefined;\n      }\n    });\n  } // nodejs compatible on server side and in the browser.\n\n\n  function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  }\n\n  function Diff(kind, path) {\n    Object.defineProperty(this, 'kind', {\n      value: kind,\n      enumerable: true\n    });\n\n    if (path && path.length) {\n      Object.defineProperty(this, 'path', {\n        value: path,\n        enumerable: true\n      });\n    }\n  }\n\n  function DiffEdit(path, origin, value) {\n    DiffEdit.super_.call(this, 'E', path);\n    Object.defineProperty(this, 'lhs', {\n      value: origin,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'rhs', {\n      value: value,\n      enumerable: true\n    });\n  }\n\n  inherits(DiffEdit, Diff);\n\n  function DiffNew(path, value) {\n    DiffNew.super_.call(this, 'N', path);\n    Object.defineProperty(this, 'rhs', {\n      value: value,\n      enumerable: true\n    });\n  }\n\n  inherits(DiffNew, Diff);\n\n  function DiffDeleted(path, value) {\n    DiffDeleted.super_.call(this, 'D', path);\n    Object.defineProperty(this, 'lhs', {\n      value: value,\n      enumerable: true\n    });\n  }\n\n  inherits(DiffDeleted, Diff);\n\n  function DiffArray(path, index, item) {\n    DiffArray.super_.call(this, 'A', path);\n    Object.defineProperty(this, 'index', {\n      value: index,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'item', {\n      value: item,\n      enumerable: true\n    });\n  }\n\n  inherits(DiffArray, Diff);\n\n  function arrayRemove(arr, from, to) {\n    var rest = arr.slice((to || from) + 1 || arr.length);\n    arr.length = from < 0 ? arr.length + from : from;\n    arr.push.apply(arr, rest);\n    return arr;\n  }\n\n  function realTypeOf(subject) {\n    var type = typeof subject;\n\n    if (type !== 'object') {\n      return type;\n    }\n\n    if (subject === Math) {\n      return 'math';\n    } else if (subject === null) {\n      return 'null';\n    } else if (Array.isArray(subject)) {\n      return 'array';\n    } else if (Object.prototype.toString.call(subject) === '[object Date]') {\n      return 'date';\n    } else if (typeof subject.toString !== 'undefined' && /^\\/.*\\//.test(subject.toString())) {\n      return 'regexp';\n    }\n\n    return 'object';\n  }\n\n  function deepDiff(lhs, rhs, changes, prefilter, path, key, stack) {\n    path = path || [];\n    var currentPath = path.slice(0);\n\n    if (typeof key !== 'undefined') {\n      if (prefilter) {\n        if (typeof prefilter === 'function' && prefilter(currentPath, key)) {\n          return;\n        } else if (typeof prefilter === 'object') {\n          if (prefilter.prefilter && prefilter.prefilter(currentPath, key)) {\n            return;\n          }\n\n          if (prefilter.normalize) {\n            var alt = prefilter.normalize(currentPath, key, lhs, rhs);\n\n            if (alt) {\n              lhs = alt[0];\n              rhs = alt[1];\n            }\n          }\n        }\n      }\n\n      currentPath.push(key);\n    } // Use string comparison for regexes\n\n\n    if (realTypeOf(lhs) === 'regexp' && realTypeOf(rhs) === 'regexp') {\n      lhs = lhs.toString();\n      rhs = rhs.toString();\n    }\n\n    var ltype = typeof lhs;\n    var rtype = typeof rhs;\n\n    if (ltype === 'undefined') {\n      if (rtype !== 'undefined') {\n        changes(new DiffNew(currentPath, rhs));\n      }\n    } else if (rtype === 'undefined') {\n      changes(new DiffDeleted(currentPath, lhs));\n    } else if (realTypeOf(lhs) !== realTypeOf(rhs)) {\n      changes(new DiffEdit(currentPath, lhs, rhs));\n    } else if (Object.prototype.toString.call(lhs) === '[object Date]' && Object.prototype.toString.call(rhs) === '[object Date]' && lhs - rhs !== 0) {\n      changes(new DiffEdit(currentPath, lhs, rhs));\n    } else if (ltype === 'object' && lhs !== null && rhs !== null) {\n      stack = stack || [];\n\n      if (stack.indexOf(lhs) < 0) {\n        stack.push(lhs);\n\n        if (Array.isArray(lhs)) {\n          var i,\n              len = lhs.length;\n\n          for (i = 0; i < lhs.length; i++) {\n            if (i >= rhs.length) {\n              changes(new DiffArray(currentPath, i, new DiffDeleted(undefined, lhs[i])));\n            } else {\n              deepDiff(lhs[i], rhs[i], changes, prefilter, currentPath, i, stack);\n            }\n          }\n\n          while (i < rhs.length) {\n            changes(new DiffArray(currentPath, i, new DiffNew(undefined, rhs[i++])));\n          }\n        } else {\n          var akeys = Object.keys(lhs);\n          var pkeys = Object.keys(rhs);\n          akeys.forEach(function (k, i) {\n            var other = pkeys.indexOf(k);\n\n            if (other >= 0) {\n              deepDiff(lhs[k], rhs[k], changes, prefilter, currentPath, k, stack);\n              pkeys = arrayRemove(pkeys, other);\n            } else {\n              deepDiff(lhs[k], undefined, changes, prefilter, currentPath, k, stack);\n            }\n          });\n          pkeys.forEach(function (k) {\n            deepDiff(undefined, rhs[k], changes, prefilter, currentPath, k, stack);\n          });\n        }\n\n        stack.length = stack.length - 1;\n      }\n    } else if (lhs !== rhs) {\n      if (!(ltype === 'number' && isNaN(lhs) && isNaN(rhs))) {\n        changes(new DiffEdit(currentPath, lhs, rhs));\n      }\n    }\n  }\n\n  function accumulateDiff(lhs, rhs, prefilter, accum) {\n    accum = accum || [];\n    deepDiff(lhs, rhs, function (diff) {\n      if (diff) {\n        accum.push(diff);\n      }\n    }, prefilter);\n    return accum.length ? accum : undefined;\n  }\n\n  function applyArrayChange(arr, index, change) {\n    if (change.path && change.path.length) {\n      var it = arr[index],\n          i,\n          u = change.path.length - 1;\n\n      for (i = 0; i < u; i++) {\n        it = it[change.path[i]];\n      }\n\n      switch (change.kind) {\n        case 'A':\n          applyArrayChange(it[change.path[i]], change.index, change.item);\n          break;\n\n        case 'D':\n          delete it[change.path[i]];\n          break;\n\n        case 'E':\n        case 'N':\n          it[change.path[i]] = change.rhs;\n          break;\n      }\n    } else {\n      switch (change.kind) {\n        case 'A':\n          applyArrayChange(arr[index], change.index, change.item);\n          break;\n\n        case 'D':\n          arr = arrayRemove(arr, index);\n          break;\n\n        case 'E':\n        case 'N':\n          arr[index] = change.rhs;\n          break;\n      }\n    }\n\n    return arr;\n  }\n\n  function applyChange(target, source, change) {\n    if (target && source && change && change.kind) {\n      var it = target,\n          i = -1,\n          last = change.path ? change.path.length - 1 : 0;\n\n      while (++i < last) {\n        if (typeof it[change.path[i]] === 'undefined') {\n          it[change.path[i]] = typeof change.path[i] === 'number' ? [] : {};\n        }\n\n        it = it[change.path[i]];\n      }\n\n      switch (change.kind) {\n        case 'A':\n          applyArrayChange(change.path ? it[change.path[i]] : it, change.index, change.item);\n          break;\n\n        case 'D':\n          delete it[change.path[i]];\n          break;\n\n        case 'E':\n        case 'N':\n          it[change.path[i]] = change.rhs;\n          break;\n      }\n    }\n  }\n\n  function revertArrayChange(arr, index, change) {\n    if (change.path && change.path.length) {\n      // the structure of the object at the index has changed...\n      var it = arr[index],\n          i,\n          u = change.path.length - 1;\n\n      for (i = 0; i < u; i++) {\n        it = it[change.path[i]];\n      }\n\n      switch (change.kind) {\n        case 'A':\n          revertArrayChange(it[change.path[i]], change.index, change.item);\n          break;\n\n        case 'D':\n          it[change.path[i]] = change.lhs;\n          break;\n\n        case 'E':\n          it[change.path[i]] = change.lhs;\n          break;\n\n        case 'N':\n          delete it[change.path[i]];\n          break;\n      }\n    } else {\n      // the array item is different...\n      switch (change.kind) {\n        case 'A':\n          revertArrayChange(arr[index], change.index, change.item);\n          break;\n\n        case 'D':\n          arr[index] = change.lhs;\n          break;\n\n        case 'E':\n          arr[index] = change.lhs;\n          break;\n\n        case 'N':\n          arr = arrayRemove(arr, index);\n          break;\n      }\n    }\n\n    return arr;\n  }\n\n  function revertChange(target, source, change) {\n    if (target && source && change && change.kind) {\n      var it = target,\n          i,\n          u;\n      u = change.path.length - 1;\n\n      for (i = 0; i < u; i++) {\n        if (typeof it[change.path[i]] === 'undefined') {\n          it[change.path[i]] = {};\n        }\n\n        it = it[change.path[i]];\n      }\n\n      switch (change.kind) {\n        case 'A':\n          // Array was modified...\n          // it will be an array...\n          revertArrayChange(it[change.path[i]], change.index, change.item);\n          break;\n\n        case 'D':\n          // Item was deleted...\n          it[change.path[i]] = change.lhs;\n          break;\n\n        case 'E':\n          // Item was edited...\n          it[change.path[i]] = change.lhs;\n          break;\n\n        case 'N':\n          // Item is new...\n          delete it[change.path[i]];\n          break;\n      }\n    }\n  }\n\n  function applyDiff(target, source, filter) {\n    if (target && source) {\n      var onChange = function onChange(change) {\n        if (!filter || filter(target, source, change)) {\n          applyChange(target, source, change);\n        }\n      };\n\n      deepDiff(target, source, onChange);\n    }\n  }\n\n  Object.defineProperties(accumulateDiff, {\n    diff: {\n      value: accumulateDiff,\n      enumerable: true\n    },\n    observableDiff: {\n      value: deepDiff,\n      enumerable: true\n    },\n    applyDiff: {\n      value: applyDiff,\n      enumerable: true\n    },\n    applyChange: {\n      value: applyChange,\n      enumerable: true\n    },\n    revertChange: {\n      value: revertChange,\n      enumerable: true\n    },\n    isConflict: {\n      value: function value() {\n        return 'undefined' !== typeof conflict;\n      },\n      enumerable: true\n    },\n    noConflict: {\n      value: function value() {\n        if (conflictResolution) {\n          conflictResolution.forEach(function (it) {\n            it();\n          });\n          conflictResolution = null;\n        }\n\n        return accumulateDiff;\n      },\n      enumerable: true\n    }\n  });\n  return accumulateDiff;\n});","map":null,"metadata":{},"sourceType":"script"}